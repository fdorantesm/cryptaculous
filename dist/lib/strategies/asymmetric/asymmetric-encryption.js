"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.AsymmetricEncryption=void 0;const crypto=require("crypto"),missing_private_key_exception_1=require("../../exceptions/missing-private-key.exception"),missing_public_key_exception_1=require("../../exceptions/missing-public-key.exception"),encryption_error_exception_1=require("../../exceptions/encryption-error.exception"),decryption_error_exception_1=require("../../exceptions/decryption-error.exception");class AsymmetricEncryption{setPrivateKey(e){this.privateKey=e}setPublicKey(e){this.publicKey=e}setKeys(e){this.setPrivateKey(e.privateKey),this.setPublicKey(e.publicKey)}encrypt(e){if(!this.publicKey)throw new missing_public_key_exception_1.MissingPublicKeyException;try{const i=Buffer.from(e,"utf8");return crypto.publicEncrypt(this.publicKey,i).toString("base64")}catch(e){throw new encryption_error_exception_1.EncryptionFailedException("Encryption failed")}}decrypt(e){if(!this.privateKey)throw new missing_private_key_exception_1.MissingPrivateKeyException;try{const i=Buffer.from(e,"base64");return crypto.privateDecrypt(this.privateKey,i).toString("utf8")}catch(e){throw new decryption_error_exception_1.DecryptionFailedException("Decryption failed")}}compare(e,i){return this.decrypt(i)===e}}exports.AsymmetricEncryption=AsymmetricEncryption;